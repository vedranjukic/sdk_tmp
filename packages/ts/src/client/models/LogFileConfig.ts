/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface LogFileConfig
 */
export interface LogFileConfig {
  /**
   *
   * @type {boolean}
   * @memberof LogFileConfig
   */
  compress?: boolean
  /**
   *
   * @type {boolean}
   * @memberof LogFileConfig
   */
  localTime?: boolean
  /**
   *
   * @type {number}
   * @memberof LogFileConfig
   */
  maxAge: number
  /**
   *
   * @type {number}
   * @memberof LogFileConfig
   */
  maxBackups: number
  /**
   *
   * @type {number}
   * @memberof LogFileConfig
   */
  maxSize: number
  /**
   *
   * @type {string}
   * @memberof LogFileConfig
   */
  path: string
}

/**
 * Check if a given object implements the LogFileConfig interface.
 */
export function instanceOfLogFileConfig(value: object): value is LogFileConfig {
  if (!('maxAge' in value) || value['maxAge'] === undefined) return false
  if (!('maxBackups' in value) || value['maxBackups'] === undefined)
    return false
  if (!('maxSize' in value) || value['maxSize'] === undefined) return false
  if (!('path' in value) || value['path'] === undefined) return false
  return true
}

export function LogFileConfigFromJSON(json: any): LogFileConfig {
  return LogFileConfigFromJSONTyped(json, false)
}

export function LogFileConfigFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LogFileConfig {
  if (json == null) {
    return json
  }
  return {
    compress: json['compress'] == null ? undefined : json['compress'],
    localTime: json['localTime'] == null ? undefined : json['localTime'],
    maxAge: json['maxAge'],
    maxBackups: json['maxBackups'],
    maxSize: json['maxSize'],
    path: json['path'],
  }
}

export function LogFileConfigToJSON(json: any): LogFileConfig {
  return LogFileConfigToJSONTyped(json, false)
}

export function LogFileConfigToJSONTyped(
  value?: LogFileConfig | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    compress: value['compress'],
    localTime: value['localTime'],
    maxAge: value['maxAge'],
    maxBackups: value['maxBackups'],
    maxSize: value['maxSize'],
    path: value['path'],
  }
}
