/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { FileStatus } from './FileStatus'
import {
  FileStatusFromJSON,
  FileStatusFromJSONTyped,
  FileStatusToJSON,
  FileStatusToJSONTyped,
} from './FileStatus'

/**
 *
 * @export
 * @interface GitStatus
 */
export interface GitStatus {
  /**
   *
   * @type {number}
   * @memberof GitStatus
   */
  ahead?: number
  /**
   *
   * @type {number}
   * @memberof GitStatus
   */
  behind?: number
  /**
   *
   * @type {boolean}
   * @memberof GitStatus
   */
  branchPublished?: boolean
  /**
   *
   * @type {string}
   * @memberof GitStatus
   */
  currentBranch: string
  /**
   *
   * @type {Array<FileStatus>}
   * @memberof GitStatus
   */
  fileStatus: Array<FileStatus>
}

/**
 * Check if a given object implements the GitStatus interface.
 */
export function instanceOfGitStatus(value: object): value is GitStatus {
  if (!('currentBranch' in value) || value['currentBranch'] === undefined)
    return false
  if (!('fileStatus' in value) || value['fileStatus'] === undefined)
    return false
  return true
}

export function GitStatusFromJSON(json: any): GitStatus {
  return GitStatusFromJSONTyped(json, false)
}

export function GitStatusFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GitStatus {
  if (json == null) {
    return json
  }
  return {
    ahead: json['ahead'] == null ? undefined : json['ahead'],
    behind: json['behind'] == null ? undefined : json['behind'],
    branchPublished:
      json['branchPublished'] == null ? undefined : json['branchPublished'],
    currentBranch: json['currentBranch'],
    fileStatus: (json['fileStatus'] as Array<any>).map(FileStatusFromJSON),
  }
}

export function GitStatusToJSON(json: any): GitStatus {
  return GitStatusToJSONTyped(json, false)
}

export function GitStatusToJSONTyped(
  value?: GitStatus | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    ahead: value['ahead'],
    behind: value['behind'],
    branchPublished: value['branchPublished'],
    currentBranch: value['currentBranch'],
    fileStatus: (value['fileStatus'] as Array<any>).map(FileStatusToJSON),
  }
}
