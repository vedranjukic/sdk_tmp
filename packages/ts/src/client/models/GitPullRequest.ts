/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface GitPullRequest
 */
export interface GitPullRequest {
  /**
   *
   * @type {string}
   * @memberof GitPullRequest
   */
  branch: string
  /**
   *
   * @type {string}
   * @memberof GitPullRequest
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof GitPullRequest
   */
  sha: string
  /**
   *
   * @type {string}
   * @memberof GitPullRequest
   */
  sourceRepoId: string
  /**
   *
   * @type {string}
   * @memberof GitPullRequest
   */
  sourceRepoName: string
  /**
   *
   * @type {string}
   * @memberof GitPullRequest
   */
  sourceRepoOwner: string
  /**
   *
   * @type {string}
   * @memberof GitPullRequest
   */
  sourceRepoUrl: string
}

/**
 * Check if a given object implements the GitPullRequest interface.
 */
export function instanceOfGitPullRequest(
  value: object,
): value is GitPullRequest {
  if (!('branch' in value) || value['branch'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('sha' in value) || value['sha'] === undefined) return false
  if (!('sourceRepoId' in value) || value['sourceRepoId'] === undefined)
    return false
  if (!('sourceRepoName' in value) || value['sourceRepoName'] === undefined)
    return false
  if (!('sourceRepoOwner' in value) || value['sourceRepoOwner'] === undefined)
    return false
  if (!('sourceRepoUrl' in value) || value['sourceRepoUrl'] === undefined)
    return false
  return true
}

export function GitPullRequestFromJSON(json: any): GitPullRequest {
  return GitPullRequestFromJSONTyped(json, false)
}

export function GitPullRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GitPullRequest {
  if (json == null) {
    return json
  }
  return {
    branch: json['branch'],
    name: json['name'],
    sha: json['sha'],
    sourceRepoId: json['sourceRepoId'],
    sourceRepoName: json['sourceRepoName'],
    sourceRepoOwner: json['sourceRepoOwner'],
    sourceRepoUrl: json['sourceRepoUrl'],
  }
}

export function GitPullRequestToJSON(json: any): GitPullRequest {
  return GitPullRequestToJSONTyped(json, false)
}

export function GitPullRequestToJSONTyped(
  value?: GitPullRequest | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    branch: value['branch'],
    name: value['name'],
    sha: value['sha'],
    sourceRepoId: value['sourceRepoId'],
    sourceRepoName: value['sourceRepoName'],
    sourceRepoOwner: value['sourceRepoOwner'],
    sourceRepoUrl: value['sourceRepoUrl'],
  }
}
