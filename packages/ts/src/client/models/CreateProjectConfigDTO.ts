/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { BuildConfig } from './BuildConfig'
import {
  BuildConfigFromJSON,
  BuildConfigFromJSONTyped,
  BuildConfigToJSON,
  BuildConfigToJSONTyped,
} from './BuildConfig'

/**
 *
 * @export
 * @interface CreateProjectConfigDTO
 */
export interface CreateProjectConfigDTO {
  /**
   *
   * @type {BuildConfig}
   * @memberof CreateProjectConfigDTO
   */
  buildConfig?: BuildConfig
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof CreateProjectConfigDTO
   */
  envVars: { [key: string]: string }
  /**
   *
   * @type {string}
   * @memberof CreateProjectConfigDTO
   */
  gitProviderConfigId?: string
  /**
   *
   * @type {string}
   * @memberof CreateProjectConfigDTO
   */
  image?: string
  /**
   *
   * @type {string}
   * @memberof CreateProjectConfigDTO
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof CreateProjectConfigDTO
   */
  repositoryUrl: string
  /**
   *
   * @type {string}
   * @memberof CreateProjectConfigDTO
   */
  user?: string
}

/**
 * Check if a given object implements the CreateProjectConfigDTO interface.
 */
export function instanceOfCreateProjectConfigDTO(
  value: object,
): value is CreateProjectConfigDTO {
  if (!('envVars' in value) || value['envVars'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('repositoryUrl' in value) || value['repositoryUrl'] === undefined)
    return false
  return true
}

export function CreateProjectConfigDTOFromJSON(
  json: any,
): CreateProjectConfigDTO {
  return CreateProjectConfigDTOFromJSONTyped(json, false)
}

export function CreateProjectConfigDTOFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CreateProjectConfigDTO {
  if (json == null) {
    return json
  }
  return {
    buildConfig:
      json['buildConfig'] == null
        ? undefined
        : BuildConfigFromJSON(json['buildConfig']),
    envVars: json['envVars'],
    gitProviderConfigId:
      json['gitProviderConfigId'] == null
        ? undefined
        : json['gitProviderConfigId'],
    image: json['image'] == null ? undefined : json['image'],
    name: json['name'],
    repositoryUrl: json['repositoryUrl'],
    user: json['user'] == null ? undefined : json['user'],
  }
}

export function CreateProjectConfigDTOToJSON(
  json: any,
): CreateProjectConfigDTO {
  return CreateProjectConfigDTOToJSONTyped(json, false)
}

export function CreateProjectConfigDTOToJSONTyped(
  value?: CreateProjectConfigDTO | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    buildConfig: BuildConfigToJSON(value['buildConfig']),
    envVars: value['envVars'],
    gitProviderConfigId: value['gitProviderConfigId'],
    image: value['image'],
    name: value['name'],
    repositoryUrl: value['repositoryUrl'],
    user: value['user'],
  }
}
