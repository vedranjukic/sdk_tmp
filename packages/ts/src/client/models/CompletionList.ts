/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { CompletionItem } from './CompletionItem'
import {
  CompletionItemFromJSON,
  CompletionItemFromJSONTyped,
  CompletionItemToJSON,
  CompletionItemToJSONTyped,
} from './CompletionItem'

/**
 *
 * @export
 * @interface CompletionList
 */
export interface CompletionList {
  /**
   *
   * @type {boolean}
   * @memberof CompletionList
   */
  isIncomplete: boolean
  /**
   *
   * @type {Array<CompletionItem>}
   * @memberof CompletionList
   */
  items: Array<CompletionItem>
}

/**
 * Check if a given object implements the CompletionList interface.
 */
export function instanceOfCompletionList(
  value: object,
): value is CompletionList {
  if (!('isIncomplete' in value) || value['isIncomplete'] === undefined)
    return false
  if (!('items' in value) || value['items'] === undefined) return false
  return true
}

export function CompletionListFromJSON(json: any): CompletionList {
  return CompletionListFromJSONTyped(json, false)
}

export function CompletionListFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CompletionList {
  if (json == null) {
    return json
  }
  return {
    isIncomplete: json['isIncomplete'],
    items: (json['items'] as Array<any>).map(CompletionItemFromJSON),
  }
}

export function CompletionListToJSON(json: any): CompletionList {
  return CompletionListToJSONTyped(json, false)
}

export function CompletionListToJSONTyped(
  value?: CompletionList | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    isIncomplete: value['isIncomplete'],
    items: (value['items'] as Array<any>).map(CompletionItemToJSON),
  }
}
