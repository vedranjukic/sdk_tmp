/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { NetworkKey, ServerConfig } from '../models/index'
import {
  NetworkKeyFromJSON,
  NetworkKeyToJSON,
  ServerConfigFromJSON,
  ServerConfigToJSON,
} from '../models/index'

export interface SetConfigRequest {
  config: ServerConfig
}

/**
 *
 */
export class ServerApi extends runtime.BaseAPI {
  /**
   * Generate a new authentication key
   * Generate a new authentication key
   */
  async generateNetworkKeyRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NetworkKey>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/server/network-key`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NetworkKeyFromJSON(jsonValue),
    )
  }

  /**
   * Generate a new authentication key
   * Generate a new authentication key
   */
  async generateNetworkKey(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NetworkKey> {
    const response = await this.generateNetworkKeyRaw(initOverrides)
    return await response.value()
  }

  /**
   * Get the server configuration
   * Get the server configuration
   */
  async getConfigRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ServerConfig>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/server/config`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ServerConfigFromJSON(jsonValue),
    )
  }

  /**
   * Get the server configuration
   * Get the server configuration
   */
  async getConfig(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ServerConfig> {
    const response = await this.getConfigRaw(initOverrides)
    return await response.value()
  }

  /**
   * List server log files
   * List server log files
   */
  async getServerLogFilesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/server/logs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse<any>(response)
  }

  /**
   * List server log files
   * List server log files
   */
  async getServerLogFiles(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<string>> {
    const response = await this.getServerLogFilesRaw(initOverrides)
    return await response.value()
  }

  /**
   * Set the server configuration
   * Set the server configuration
   */
  async setConfigRaw(
    requestParameters: SetConfigRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ServerConfig>> {
    if (requestParameters['config'] == null) {
      throw new runtime.RequiredError(
        'config',
        'Required parameter "config" was null or undefined when calling setConfig().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/server/config`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ServerConfigToJSON(requestParameters['config']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ServerConfigFromJSON(jsonValue),
    )
  }

  /**
   * Set the server configuration
   * Set the server configuration
   */
  async setConfig(
    requestParameters: SetConfigRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ServerConfig> {
    const response = await this.setConfigRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
