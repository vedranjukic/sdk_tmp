/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { CreateProviderTargetDTO, ProviderTarget } from '../models/index'
import {
  CreateProviderTargetDTOFromJSON,
  CreateProviderTargetDTOToJSON,
  ProviderTargetFromJSON,
  ProviderTargetToJSON,
} from '../models/index'

export interface RemoveTargetRequest {
  target: string
}

export interface SetDefaultTargetRequest {
  target: string
}

export interface SetTargetRequest {
  target: CreateProviderTargetDTO
}

/**
 *
 */
export class TargetApi extends runtime.BaseAPI {
  /**
   * List targets
   * List targets
   */
  async listTargetsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ProviderTarget>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/target`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ProviderTargetFromJSON),
    )
  }

  /**
   * List targets
   * List targets
   */
  async listTargets(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ProviderTarget>> {
    const response = await this.listTargetsRaw(initOverrides)
    return await response.value()
  }

  /**
   * Remove a target
   * Remove a target
   */
  async removeTargetRaw(
    requestParameters: RemoveTargetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['target'] == null) {
      throw new runtime.RequiredError(
        'target',
        'Required parameter "target" was null or undefined when calling removeTarget().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/target/{target}`.replace(
          `{${'target'}}`,
          encodeURIComponent(String(requestParameters['target'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Remove a target
   * Remove a target
   */
  async removeTarget(
    requestParameters: RemoveTargetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.removeTargetRaw(requestParameters, initOverrides)
  }

  /**
   * Set target to default
   * Set target to default
   */
  async setDefaultTargetRaw(
    requestParameters: SetDefaultTargetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['target'] == null) {
      throw new runtime.RequiredError(
        'target',
        'Required parameter "target" was null or undefined when calling setDefaultTarget().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/target/{target}/set-default`.replace(
          `{${'target'}}`,
          encodeURIComponent(String(requestParameters['target'])),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Set target to default
   * Set target to default
   */
  async setDefaultTarget(
    requestParameters: SetDefaultTargetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setDefaultTargetRaw(requestParameters, initOverrides)
  }

  /**
   * Set a target
   * Set a target
   */
  async setTargetRaw(
    requestParameters: SetTargetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['target'] == null) {
      throw new runtime.RequiredError(
        'target',
        'Required parameter "target" was null or undefined when calling setTarget().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/target`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreateProviderTargetDTOToJSON(requestParameters['target']),
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Set a target
   * Set a target
   */
  async setTarget(
    requestParameters: SetTargetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setTargetRaw(requestParameters, initOverrides)
  }
}
