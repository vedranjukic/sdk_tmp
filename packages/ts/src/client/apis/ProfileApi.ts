/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { ProfileData } from '../models/index'
import { ProfileDataFromJSON, ProfileDataToJSON } from '../models/index'

export interface SetProfileDataRequest {
  profileData: ProfileData
}

/**
 *
 */
export class ProfileApi extends runtime.BaseAPI {
  /**
   * Delete profile data
   * Delete profile data
   */
  async deleteProfileDataRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/profile`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete profile data
   * Delete profile data
   */
  async deleteProfileData(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteProfileDataRaw(initOverrides)
  }

  /**
   * Get profile data
   * Get profile data
   */
  async getProfileDataRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProfileData>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/profile`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProfileDataFromJSON(jsonValue),
    )
  }

  /**
   * Get profile data
   * Get profile data
   */
  async getProfileData(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProfileData> {
    const response = await this.getProfileDataRaw(initOverrides)
    return await response.value()
  }

  /**
   * Set profile data
   * Set profile data
   */
  async setProfileDataRaw(
    requestParameters: SetProfileDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['profileData'] == null) {
      throw new runtime.RequiredError(
        'profileData',
        'Required parameter "profileData" was null or undefined when calling setProfileData().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/profile`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ProfileDataToJSON(requestParameters['profileData']),
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Set profile data
   * Set profile data
   */
  async setProfileData(
    requestParameters: SetProfileDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setProfileDataRaw(requestParameters, initOverrides)
  }
}
