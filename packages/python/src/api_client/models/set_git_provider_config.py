# coding: utf-8

"""
    Daytona Server API

    Daytona Server API

    The version of the OpenAPI document: v0.0.0-dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from api_client.models.signing_method import SigningMethod
from typing import Optional, Set
from typing_extensions import Self


class SetGitProviderConfig(BaseModel):
    """
    SetGitProviderConfig
    """  # noqa: E501

    alias: Optional[StrictStr] = None
    base_api_url: Optional[StrictStr] = Field(default=None, alias="baseApiUrl")
    id: Optional[StrictStr] = None
    provider_id: StrictStr = Field(alias="providerId")
    signing_key: Optional[StrictStr] = Field(default=None, alias="signingKey")
    signing_method: Optional[SigningMethod] = Field(default=None, alias="signingMethod")
    token: StrictStr
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "alias",
        "baseApiUrl",
        "id",
        "providerId",
        "signingKey",
        "signingMethod",
        "token",
        "username",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SetGitProviderConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SetGitProviderConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "alias": obj.get("alias"),
                "baseApiUrl": obj.get("baseApiUrl"),
                "id": obj.get("id"),
                "providerId": obj.get("providerId"),
                "signingKey": obj.get("signingKey"),
                "signingMethod": obj.get("signingMethod"),
                "token": obj.get("token"),
                "username": obj.get("username"),
            }
        )
        return _obj
