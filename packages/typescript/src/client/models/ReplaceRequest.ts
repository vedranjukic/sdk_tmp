/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface ReplaceRequest
 */
export interface ReplaceRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof ReplaceRequest
   */
  files: Array<string>
  /**
   *
   * @type {string}
   * @memberof ReplaceRequest
   */
  newValue: string
  /**
   *
   * @type {string}
   * @memberof ReplaceRequest
   */
  pattern: string
}

/**
 * Check if a given object implements the ReplaceRequest interface.
 */
export function instanceOfReplaceRequest(
  value: object,
): value is ReplaceRequest {
  if (!('files' in value) || value['files'] === undefined) return false
  if (!('newValue' in value) || value['newValue'] === undefined) return false
  if (!('pattern' in value) || value['pattern'] === undefined) return false
  return true
}

export function ReplaceRequestFromJSON(json: any): ReplaceRequest {
  return ReplaceRequestFromJSONTyped(json, false)
}

export function ReplaceRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ReplaceRequest {
  if (json == null) {
    return json
  }
  return {
    files: json['files'],
    newValue: json['newValue'],
    pattern: json['pattern'],
  }
}

export function ReplaceRequestToJSON(json: any): ReplaceRequest {
  return ReplaceRequestToJSONTyped(json, false)
}

export function ReplaceRequestToJSONTyped(
  value?: ReplaceRequest | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    files: value['files'],
    newValue: value['newValue'],
    pattern: value['pattern'],
  }
}
