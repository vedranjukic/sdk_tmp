/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface ProjectInfo
 */
export interface ProjectInfo {
  /**
   *
   * @type {string}
   * @memberof ProjectInfo
   */
  created: string
  /**
   *
   * @type {boolean}
   * @memberof ProjectInfo
   */
  isRunning: boolean
  /**
   *
   * @type {string}
   * @memberof ProjectInfo
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof ProjectInfo
   */
  providerMetadata?: string
  /**
   *
   * @type {string}
   * @memberof ProjectInfo
   */
  workspaceId: string
}

/**
 * Check if a given object implements the ProjectInfo interface.
 */
export function instanceOfProjectInfo(value: object): value is ProjectInfo {
  if (!('created' in value) || value['created'] === undefined) return false
  if (!('isRunning' in value) || value['isRunning'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('workspaceId' in value) || value['workspaceId'] === undefined)
    return false
  return true
}

export function ProjectInfoFromJSON(json: any): ProjectInfo {
  return ProjectInfoFromJSONTyped(json, false)
}

export function ProjectInfoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProjectInfo {
  if (json == null) {
    return json
  }
  return {
    created: json['created'],
    isRunning: json['isRunning'],
    name: json['name'],
    providerMetadata:
      json['providerMetadata'] == null ? undefined : json['providerMetadata'],
    workspaceId: json['workspaceId'],
  }
}

export function ProjectInfoToJSON(json: any): ProjectInfo {
  return ProjectInfoToJSONTyped(json, false)
}

export function ProjectInfoToJSONTyped(
  value?: ProjectInfo | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    created: value['created'],
    isRunning: value['isRunning'],
    name: value['name'],
    providerMetadata: value['providerMetadata'],
    workspaceId: value['workspaceId'],
  }
}
