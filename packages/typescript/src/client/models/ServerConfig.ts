/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { FRPSConfig } from './FRPSConfig'
import {
  FRPSConfigFromJSON,
  FRPSConfigFromJSONTyped,
  FRPSConfigToJSON,
  FRPSConfigToJSONTyped,
} from './FRPSConfig'
import type { LogFileConfig } from './LogFileConfig'
import {
  LogFileConfigFromJSON,
  LogFileConfigFromJSONTyped,
  LogFileConfigToJSON,
  LogFileConfigToJSONTyped,
} from './LogFileConfig'

/**
 *
 * @export
 * @interface ServerConfig
 */
export interface ServerConfig {
  /**
   *
   * @type {number}
   * @memberof ServerConfig
   */
  apiPort: number
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  binariesPath: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  buildImageNamespace?: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  builderImage: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  builderRegistryServer: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  defaultProjectImage: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  defaultProjectUser: string
  /**
   *
   * @type {FRPSConfig}
   * @memberof ServerConfig
   */
  frps?: FRPSConfig
  /**
   *
   * @type {number}
   * @memberof ServerConfig
   */
  headscalePort: number
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  localBuilderRegistryImage: string
  /**
   *
   * @type {number}
   * @memberof ServerConfig
   */
  localBuilderRegistryPort: number
  /**
   *
   * @type {LogFileConfig}
   * @memberof ServerConfig
   */
  logFile: LogFileConfig
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  providersDir: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  registryUrl: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  samplesIndexUrl?: string
  /**
   *
   * @type {string}
   * @memberof ServerConfig
   */
  serverDownloadUrl: string
}

/**
 * Check if a given object implements the ServerConfig interface.
 */
export function instanceOfServerConfig(value: object): value is ServerConfig {
  if (!('apiPort' in value) || value['apiPort'] === undefined) return false
  if (!('binariesPath' in value) || value['binariesPath'] === undefined)
    return false
  if (!('builderImage' in value) || value['builderImage'] === undefined)
    return false
  if (
    !('builderRegistryServer' in value) ||
    value['builderRegistryServer'] === undefined
  )
    return false
  if (
    !('defaultProjectImage' in value) ||
    value['defaultProjectImage'] === undefined
  )
    return false
  if (
    !('defaultProjectUser' in value) ||
    value['defaultProjectUser'] === undefined
  )
    return false
  if (!('headscalePort' in value) || value['headscalePort'] === undefined)
    return false
  if (!('id' in value) || value['id'] === undefined) return false
  if (
    !('localBuilderRegistryImage' in value) ||
    value['localBuilderRegistryImage'] === undefined
  )
    return false
  if (
    !('localBuilderRegistryPort' in value) ||
    value['localBuilderRegistryPort'] === undefined
  )
    return false
  if (!('logFile' in value) || value['logFile'] === undefined) return false
  if (!('providersDir' in value) || value['providersDir'] === undefined)
    return false
  if (!('registryUrl' in value) || value['registryUrl'] === undefined)
    return false
  if (
    !('serverDownloadUrl' in value) ||
    value['serverDownloadUrl'] === undefined
  )
    return false
  return true
}

export function ServerConfigFromJSON(json: any): ServerConfig {
  return ServerConfigFromJSONTyped(json, false)
}

export function ServerConfigFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ServerConfig {
  if (json == null) {
    return json
  }
  return {
    apiPort: json['apiPort'],
    binariesPath: json['binariesPath'],
    buildImageNamespace:
      json['buildImageNamespace'] == null
        ? undefined
        : json['buildImageNamespace'],
    builderImage: json['builderImage'],
    builderRegistryServer: json['builderRegistryServer'],
    defaultProjectImage: json['defaultProjectImage'],
    defaultProjectUser: json['defaultProjectUser'],
    frps: json['frps'] == null ? undefined : FRPSConfigFromJSON(json['frps']),
    headscalePort: json['headscalePort'],
    id: json['id'],
    localBuilderRegistryImage: json['localBuilderRegistryImage'],
    localBuilderRegistryPort: json['localBuilderRegistryPort'],
    logFile: LogFileConfigFromJSON(json['logFile']),
    providersDir: json['providersDir'],
    registryUrl: json['registryUrl'],
    samplesIndexUrl:
      json['samplesIndexUrl'] == null ? undefined : json['samplesIndexUrl'],
    serverDownloadUrl: json['serverDownloadUrl'],
  }
}

export function ServerConfigToJSON(json: any): ServerConfig {
  return ServerConfigToJSONTyped(json, false)
}

export function ServerConfigToJSONTyped(
  value?: ServerConfig | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    apiPort: value['apiPort'],
    binariesPath: value['binariesPath'],
    buildImageNamespace: value['buildImageNamespace'],
    builderImage: value['builderImage'],
    builderRegistryServer: value['builderRegistryServer'],
    defaultProjectImage: value['defaultProjectImage'],
    defaultProjectUser: value['defaultProjectUser'],
    frps: FRPSConfigToJSON(value['frps']),
    headscalePort: value['headscalePort'],
    id: value['id'],
    localBuilderRegistryImage: value['localBuilderRegistryImage'],
    localBuilderRegistryPort: value['localBuilderRegistryPort'],
    logFile: LogFileConfigToJSON(value['logFile']),
    providersDir: value['providersDir'],
    registryUrl: value['registryUrl'],
    samplesIndexUrl: value['samplesIndexUrl'],
    serverDownloadUrl: value['serverDownloadUrl'],
  }
}
