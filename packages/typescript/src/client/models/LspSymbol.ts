/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { LspLocation } from './LspLocation'
import {
  LspLocationFromJSON,
  LspLocationFromJSONTyped,
  LspLocationToJSON,
  LspLocationToJSONTyped,
} from './LspLocation'

/**
 *
 * @export
 * @interface LspSymbol
 */
export interface LspSymbol {
  /**
   *
   * @type {number}
   * @memberof LspSymbol
   */
  kind: number
  /**
   *
   * @type {LspLocation}
   * @memberof LspSymbol
   */
  location: LspLocation
  /**
   *
   * @type {string}
   * @memberof LspSymbol
   */
  name: string
}

/**
 * Check if a given object implements the LspSymbol interface.
 */
export function instanceOfLspSymbol(value: object): value is LspSymbol {
  if (!('kind' in value) || value['kind'] === undefined) return false
  if (!('location' in value) || value['location'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  return true
}

export function LspSymbolFromJSON(json: any): LspSymbol {
  return LspSymbolFromJSONTyped(json, false)
}

export function LspSymbolFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LspSymbol {
  if (json == null) {
    return json
  }
  return {
    kind: json['kind'],
    location: LspLocationFromJSON(json['location']),
    name: json['name'],
  }
}

export function LspSymbolToJSON(json: any): LspSymbol {
  return LspSymbolToJSONTyped(json, false)
}

export function LspSymbolToJSONTyped(
  value?: LspSymbol | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    kind: value['kind'],
    location: LspLocationToJSON(value['location']),
    name: value['name'],
  }
}
