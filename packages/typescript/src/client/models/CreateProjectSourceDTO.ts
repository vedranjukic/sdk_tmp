/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { GitRepository } from './GitRepository'
import {
  GitRepositoryFromJSON,
  GitRepositoryFromJSONTyped,
  GitRepositoryToJSON,
  GitRepositoryToJSONTyped,
} from './GitRepository'

/**
 *
 * @export
 * @interface CreateProjectSourceDTO
 */
export interface CreateProjectSourceDTO {
  /**
   *
   * @type {GitRepository}
   * @memberof CreateProjectSourceDTO
   */
  repository: GitRepository
}

/**
 * Check if a given object implements the CreateProjectSourceDTO interface.
 */
export function instanceOfCreateProjectSourceDTO(
  value: object,
): value is CreateProjectSourceDTO {
  if (!('repository' in value) || value['repository'] === undefined)
    return false
  return true
}

export function CreateProjectSourceDTOFromJSON(
  json: any,
): CreateProjectSourceDTO {
  return CreateProjectSourceDTOFromJSONTyped(json, false)
}

export function CreateProjectSourceDTOFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CreateProjectSourceDTO {
  if (json == null) {
    return json
  }
  return {
    repository: GitRepositoryFromJSON(json['repository']),
  }
}

export function CreateProjectSourceDTOToJSON(
  json: any,
): CreateProjectSourceDTO {
  return CreateProjectSourceDTOToJSONTyped(json, false)
}

export function CreateProjectSourceDTOToJSONTyped(
  value?: CreateProjectSourceDTO | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    repository: GitRepositoryToJSON(value['repository']),
  }
}
