/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface GitUser
 */
export interface GitUser {
  /**
   *
   * @type {string}
   * @memberof GitUser
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof GitUser
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof GitUser
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof GitUser
   */
  username: string
}

/**
 * Check if a given object implements the GitUser interface.
 */
export function instanceOfGitUser(value: object): value is GitUser {
  if (!('email' in value) || value['email'] === undefined) return false
  if (!('id' in value) || value['id'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('username' in value) || value['username'] === undefined) return false
  return true
}

export function GitUserFromJSON(json: any): GitUser {
  return GitUserFromJSONTyped(json, false)
}

export function GitUserFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GitUser {
  if (json == null) {
    return json
  }
  return {
    email: json['email'],
    id: json['id'],
    name: json['name'],
    username: json['username'],
  }
}

export function GitUserToJSON(json: any): GitUser {
  return GitUserToJSONTyped(json, false)
}

export function GitUserToJSONTyped(
  value?: GitUser | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    email: value['email'],
    id: value['id'],
    name: value['name'],
    username: value['username'],
  }
}
