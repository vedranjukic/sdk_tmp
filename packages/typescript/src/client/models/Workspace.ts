/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { Project } from './Project'
import {
  ProjectFromJSON,
  ProjectFromJSONTyped,
  ProjectToJSON,
  ProjectToJSONTyped,
} from './Project'

/**
 *
 * @export
 * @interface Workspace
 */
export interface Workspace {
  /**
   *
   * @type {string}
   * @memberof Workspace
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof Workspace
   */
  name: string
  /**
   *
   * @type {Array<Project>}
   * @memberof Workspace
   */
  projects: Array<Project>
  /**
   *
   * @type {string}
   * @memberof Workspace
   */
  target: string
}

/**
 * Check if a given object implements the Workspace interface.
 */
export function instanceOfWorkspace(value: object): value is Workspace {
  if (!('id' in value) || value['id'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('projects' in value) || value['projects'] === undefined) return false
  if (!('target' in value) || value['target'] === undefined) return false
  return true
}

export function WorkspaceFromJSON(json: any): Workspace {
  return WorkspaceFromJSONTyped(json, false)
}

export function WorkspaceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Workspace {
  if (json == null) {
    return json
  }
  return {
    id: json['id'],
    name: json['name'],
    projects: (json['projects'] as Array<any>).map(ProjectFromJSON),
    target: json['target'],
  }
}

export function WorkspaceToJSON(json: any): Workspace {
  return WorkspaceToJSONTyped(json, false)
}

export function WorkspaceToJSONTyped(
  value?: Workspace | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    id: value['id'],
    name: value['name'],
    projects: (value['projects'] as Array<any>).map(ProjectToJSON),
    target: value['target'],
  }
}
