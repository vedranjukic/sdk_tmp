/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { LspRange } from './LspRange'
import {
  LspRangeFromJSON,
  LspRangeFromJSONTyped,
  LspRangeToJSON,
  LspRangeToJSONTyped,
} from './LspRange'

/**
 *
 * @export
 * @interface LspLocation
 */
export interface LspLocation {
  /**
   *
   * @type {LspRange}
   * @memberof LspLocation
   */
  range: LspRange
  /**
   *
   * @type {string}
   * @memberof LspLocation
   */
  uri: string
}

/**
 * Check if a given object implements the LspLocation interface.
 */
export function instanceOfLspLocation(value: object): value is LspLocation {
  if (!('range' in value) || value['range'] === undefined) return false
  if (!('uri' in value) || value['uri'] === undefined) return false
  return true
}

export function LspLocationFromJSON(json: any): LspLocation {
  return LspLocationFromJSONTyped(json, false)
}

export function LspLocationFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LspLocation {
  if (json == null) {
    return json
  }
  return {
    range: LspRangeFromJSON(json['range']),
    uri: json['uri'],
  }
}

export function LspLocationToJSON(json: any): LspLocation {
  return LspLocationToJSONTyped(json, false)
}

export function LspLocationToJSONTyped(
  value?: LspLocation | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    range: LspRangeToJSON(value['range']),
    uri: value['uri'],
  }
}
