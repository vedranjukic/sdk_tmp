/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { CloneTarget } from './CloneTarget'
import {
  CloneTargetFromJSON,
  CloneTargetFromJSONTyped,
  CloneTargetToJSON,
  CloneTargetToJSONTyped,
} from './CloneTarget'

/**
 *
 * @export
 * @interface GitRepository
 */
export interface GitRepository {
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  branch: string
  /**
   *
   * @type {CloneTarget}
   * @memberof GitRepository
   */
  cloneTarget?: CloneTarget
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  owner: string
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  path?: string
  /**
   *
   * @type {number}
   * @memberof GitRepository
   */
  prNumber?: number
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  sha: string
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  source: string
  /**
   *
   * @type {string}
   * @memberof GitRepository
   */
  url: string
}

/**
 * Check if a given object implements the GitRepository interface.
 */
export function instanceOfGitRepository(value: object): value is GitRepository {
  if (!('branch' in value) || value['branch'] === undefined) return false
  if (!('id' in value) || value['id'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('owner' in value) || value['owner'] === undefined) return false
  if (!('sha' in value) || value['sha'] === undefined) return false
  if (!('source' in value) || value['source'] === undefined) return false
  if (!('url' in value) || value['url'] === undefined) return false
  return true
}

export function GitRepositoryFromJSON(json: any): GitRepository {
  return GitRepositoryFromJSONTyped(json, false)
}

export function GitRepositoryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GitRepository {
  if (json == null) {
    return json
  }
  return {
    branch: json['branch'],
    cloneTarget:
      json['cloneTarget'] == null
        ? undefined
        : CloneTargetFromJSON(json['cloneTarget']),
    id: json['id'],
    name: json['name'],
    owner: json['owner'],
    path: json['path'] == null ? undefined : json['path'],
    prNumber: json['prNumber'] == null ? undefined : json['prNumber'],
    sha: json['sha'],
    source: json['source'],
    url: json['url'],
  }
}

export function GitRepositoryToJSON(json: any): GitRepository {
  return GitRepositoryToJSONTyped(json, false)
}

export function GitRepositoryToJSONTyped(
  value?: GitRepository | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    branch: value['branch'],
    cloneTarget: CloneTargetToJSON(value['cloneTarget']),
    id: value['id'],
    name: value['name'],
    owner: value['owner'],
    path: value['path'],
    prNumber: value['prNumber'],
    sha: value['sha'],
    source: value['source'],
    url: value['url'],
  }
}
