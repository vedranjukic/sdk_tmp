/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  GetRepositoryContext,
  GitBranch,
  GitNamespace,
  GitProvider,
  GitPullRequest,
  GitRepository,
  GitUser,
  RepositoryUrl,
  SetGitProviderConfig,
} from '../models/index'
import {
  GetRepositoryContextFromJSON,
  GetRepositoryContextToJSON,
  GitBranchFromJSON,
  GitBranchToJSON,
  GitNamespaceFromJSON,
  GitNamespaceToJSON,
  GitProviderFromJSON,
  GitProviderToJSON,
  GitPullRequestFromJSON,
  GitPullRequestToJSON,
  GitRepositoryFromJSON,
  GitRepositoryToJSON,
  GitUserFromJSON,
  GitUserToJSON,
  RepositoryUrlFromJSON,
  RepositoryUrlToJSON,
  SetGitProviderConfigFromJSON,
  SetGitProviderConfigToJSON,
} from '../models/index'

export interface GetGitContextRequest {
  repository: GetRepositoryContext
}

export interface GetGitProviderRequest {
  gitProviderId: string
}

export interface GetGitProviderIdForUrlRequest {
  url: string
}

export interface GetGitUserRequest {
  gitProviderId: string
}

export interface GetNamespacesRequest {
  gitProviderId: string
  page?: number
  perPage?: number
}

export interface GetRepoBranchesRequest {
  gitProviderId: string
  namespaceId: string
  repositoryId: string
  page?: number
  perPage?: number
}

export interface GetRepoPRsRequest {
  gitProviderId: string
  namespaceId: string
  repositoryId: string
  page?: number
  perPage?: number
}

export interface GetRepositoriesRequest {
  gitProviderId: string
  namespaceId: string
  page?: number
  perPage?: number
}

export interface GetUrlFromRepositoryRequest {
  repository: GitRepository
}

export interface ListGitProvidersForUrlRequest {
  url: string
}

export interface RemoveGitProviderRequest {
  gitProviderId: string
}

export interface SetGitProviderRequest {
  gitProviderConfig: SetGitProviderConfig
}

/**
 *
 */
export class GitProviderApi extends runtime.BaseAPI {
  /**
   * Get Git context
   * Get Git context
   */
  async getGitContextRaw(
    requestParameters: GetGitContextRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GitRepository>> {
    if (requestParameters['repository'] == null) {
      throw new runtime.RequiredError(
        'repository',
        'Required parameter "repository" was null or undefined when calling getGitContext().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/context`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GetRepositoryContextToJSON(requestParameters['repository']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GitRepositoryFromJSON(jsonValue),
    )
  }

  /**
   * Get Git context
   * Get Git context
   */
  async getGitContext(
    requestParameters: GetGitContextRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GitRepository> {
    const response = await this.getGitContextRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get Git provider
   * Get Git provider
   */
  async getGitProviderRaw(
    requestParameters: GetGitProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GitProvider>> {
    if (requestParameters['gitProviderId'] == null) {
      throw new runtime.RequiredError(
        'gitProviderId',
        'Required parameter "gitProviderId" was null or undefined when calling getGitProvider().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/{gitProviderId}`.replace(
          `{${'gitProviderId'}}`,
          encodeURIComponent(String(requestParameters['gitProviderId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GitProviderFromJSON(jsonValue),
    )
  }

  /**
   * Get Git provider
   * Get Git provider
   */
  async getGitProvider(
    requestParameters: GetGitProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GitProvider> {
    const response = await this.getGitProviderRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get Git provider ID
   * Get Git provider ID
   */
  async getGitProviderIdForUrlRaw(
    requestParameters: GetGitProviderIdForUrlRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['url'] == null) {
      throw new runtime.RequiredError(
        'url',
        'Required parameter "url" was null or undefined when calling getGitProviderIdForUrl().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/id-for-url/{url}`.replace(
          `{${'url'}}`,
          encodeURIComponent(String(requestParameters['url'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response)
    } else {
      return new runtime.TextApiResponse(response) as any
    }
  }

  /**
   * Get Git provider ID
   * Get Git provider ID
   */
  async getGitProviderIdForUrl(
    requestParameters: GetGitProviderIdForUrlRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.getGitProviderIdForUrlRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get Git context
   * Get Git context
   */
  async getGitUserRaw(
    requestParameters: GetGitUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GitUser>> {
    if (requestParameters['gitProviderId'] == null) {
      throw new runtime.RequiredError(
        'gitProviderId',
        'Required parameter "gitProviderId" was null or undefined when calling getGitUser().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/{gitProviderId}/user`.replace(
          `{${'gitProviderId'}}`,
          encodeURIComponent(String(requestParameters['gitProviderId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GitUserFromJSON(jsonValue),
    )
  }

  /**
   * Get Git context
   * Get Git context
   */
  async getGitUser(
    requestParameters: GetGitUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GitUser> {
    const response = await this.getGitUserRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get Git namespaces
   * Get Git namespaces
   */
  async getNamespacesRaw(
    requestParameters: GetNamespacesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GitNamespace>>> {
    if (requestParameters['gitProviderId'] == null) {
      throw new runtime.RequiredError(
        'gitProviderId',
        'Required parameter "gitProviderId" was null or undefined when calling getNamespaces().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/{gitProviderId}/namespaces`.replace(
          `{${'gitProviderId'}}`,
          encodeURIComponent(String(requestParameters['gitProviderId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GitNamespaceFromJSON),
    )
  }

  /**
   * Get Git namespaces
   * Get Git namespaces
   */
  async getNamespaces(
    requestParameters: GetNamespacesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GitNamespace>> {
    const response = await this.getNamespacesRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get Git repository branches
   * Get Git repository branches
   */
  async getRepoBranchesRaw(
    requestParameters: GetRepoBranchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GitBranch>>> {
    if (requestParameters['gitProviderId'] == null) {
      throw new runtime.RequiredError(
        'gitProviderId',
        'Required parameter "gitProviderId" was null or undefined when calling getRepoBranches().',
      )
    }

    if (requestParameters['namespaceId'] == null) {
      throw new runtime.RequiredError(
        'namespaceId',
        'Required parameter "namespaceId" was null or undefined when calling getRepoBranches().',
      )
    }

    if (requestParameters['repositoryId'] == null) {
      throw new runtime.RequiredError(
        'repositoryId',
        'Required parameter "repositoryId" was null or undefined when calling getRepoBranches().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/{gitProviderId}/{namespaceId}/{repositoryId}/branches`
          .replace(
            `{${'gitProviderId'}}`,
            encodeURIComponent(String(requestParameters['gitProviderId'])),
          )
          .replace(
            `{${'namespaceId'}}`,
            encodeURIComponent(String(requestParameters['namespaceId'])),
          )
          .replace(
            `{${'repositoryId'}}`,
            encodeURIComponent(String(requestParameters['repositoryId'])),
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GitBranchFromJSON),
    )
  }

  /**
   * Get Git repository branches
   * Get Git repository branches
   */
  async getRepoBranches(
    requestParameters: GetRepoBranchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GitBranch>> {
    const response = await this.getRepoBranchesRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get Git repository PRs
   * Get Git repository PRs
   */
  async getRepoPRsRaw(
    requestParameters: GetRepoPRsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GitPullRequest>>> {
    if (requestParameters['gitProviderId'] == null) {
      throw new runtime.RequiredError(
        'gitProviderId',
        'Required parameter "gitProviderId" was null or undefined when calling getRepoPRs().',
      )
    }

    if (requestParameters['namespaceId'] == null) {
      throw new runtime.RequiredError(
        'namespaceId',
        'Required parameter "namespaceId" was null or undefined when calling getRepoPRs().',
      )
    }

    if (requestParameters['repositoryId'] == null) {
      throw new runtime.RequiredError(
        'repositoryId',
        'Required parameter "repositoryId" was null or undefined when calling getRepoPRs().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/{gitProviderId}/{namespaceId}/{repositoryId}/pull-requests`
          .replace(
            `{${'gitProviderId'}}`,
            encodeURIComponent(String(requestParameters['gitProviderId'])),
          )
          .replace(
            `{${'namespaceId'}}`,
            encodeURIComponent(String(requestParameters['namespaceId'])),
          )
          .replace(
            `{${'repositoryId'}}`,
            encodeURIComponent(String(requestParameters['repositoryId'])),
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GitPullRequestFromJSON),
    )
  }

  /**
   * Get Git repository PRs
   * Get Git repository PRs
   */
  async getRepoPRs(
    requestParameters: GetRepoPRsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GitPullRequest>> {
    const response = await this.getRepoPRsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get Git repositories
   * Get Git repositories
   */
  async getRepositoriesRaw(
    requestParameters: GetRepositoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GitRepository>>> {
    if (requestParameters['gitProviderId'] == null) {
      throw new runtime.RequiredError(
        'gitProviderId',
        'Required parameter "gitProviderId" was null or undefined when calling getRepositories().',
      )
    }

    if (requestParameters['namespaceId'] == null) {
      throw new runtime.RequiredError(
        'namespaceId',
        'Required parameter "namespaceId" was null or undefined when calling getRepositories().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page']
    }

    if (requestParameters['perPage'] != null) {
      queryParameters['per_page'] = requestParameters['perPage']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/{gitProviderId}/{namespaceId}/repositories`
          .replace(
            `{${'gitProviderId'}}`,
            encodeURIComponent(String(requestParameters['gitProviderId'])),
          )
          .replace(
            `{${'namespaceId'}}`,
            encodeURIComponent(String(requestParameters['namespaceId'])),
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GitRepositoryFromJSON),
    )
  }

  /**
   * Get Git repositories
   * Get Git repositories
   */
  async getRepositories(
    requestParameters: GetRepositoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GitRepository>> {
    const response = await this.getRepositoriesRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get URL from Git repository
   * Get URL from Git repository
   */
  async getUrlFromRepositoryRaw(
    requestParameters: GetUrlFromRepositoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RepositoryUrl>> {
    if (requestParameters['repository'] == null) {
      throw new runtime.RequiredError(
        'repository',
        'Required parameter "repository" was null or undefined when calling getUrlFromRepository().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/context/url`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GitRepositoryToJSON(requestParameters['repository']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RepositoryUrlFromJSON(jsonValue),
    )
  }

  /**
   * Get URL from Git repository
   * Get URL from Git repository
   */
  async getUrlFromRepository(
    requestParameters: GetUrlFromRepositoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RepositoryUrl> {
    const response = await this.getUrlFromRepositoryRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * List Git providers
   * List Git providers
   */
  async listGitProvidersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GitProvider>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GitProviderFromJSON),
    )
  }

  /**
   * List Git providers
   * List Git providers
   */
  async listGitProviders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GitProvider>> {
    const response = await this.listGitProvidersRaw(initOverrides)
    return await response.value()
  }

  /**
   * List Git providers for url
   * List Git providers for url
   */
  async listGitProvidersForUrlRaw(
    requestParameters: ListGitProvidersForUrlRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GitProvider>>> {
    if (requestParameters['url'] == null) {
      throw new runtime.RequiredError(
        'url',
        'Required parameter "url" was null or undefined when calling listGitProvidersForUrl().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/for-url/{url}`.replace(
          `{${'url'}}`,
          encodeURIComponent(String(requestParameters['url'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GitProviderFromJSON),
    )
  }

  /**
   * List Git providers for url
   * List Git providers for url
   */
  async listGitProvidersForUrl(
    requestParameters: ListGitProvidersForUrlRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GitProvider>> {
    const response = await this.listGitProvidersForUrlRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Remove Git provider
   * Remove Git provider
   */
  async removeGitProviderRaw(
    requestParameters: RemoveGitProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['gitProviderId'] == null) {
      throw new runtime.RequiredError(
        'gitProviderId',
        'Required parameter "gitProviderId" was null or undefined when calling removeGitProvider().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider/{gitProviderId}`.replace(
          `{${'gitProviderId'}}`,
          encodeURIComponent(String(requestParameters['gitProviderId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Remove Git provider
   * Remove Git provider
   */
  async removeGitProvider(
    requestParameters: RemoveGitProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.removeGitProviderRaw(requestParameters, initOverrides)
  }

  /**
   * Set Git provider
   * Set Git provider
   */
  async setGitProviderRaw(
    requestParameters: SetGitProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['gitProviderConfig'] == null) {
      throw new runtime.RequiredError(
        'gitProviderConfig',
        'Required parameter "gitProviderConfig" was null or undefined when calling setGitProvider().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/gitprovider`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: SetGitProviderConfigToJSON(
          requestParameters['gitProviderConfig'],
        ),
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Set Git provider
   * Set Git provider
   */
  async setGitProvider(
    requestParameters: SetGitProviderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setGitProviderRaw(requestParameters, initOverrides)
  }
}
