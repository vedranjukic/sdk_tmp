/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { Build, CreateBuildDTO } from '../models/index'
import {
  BuildFromJSON,
  BuildToJSON,
  CreateBuildDTOFromJSON,
  CreateBuildDTOToJSON,
} from '../models/index'

export interface CreateBuildRequest {
  createBuildDto: CreateBuildDTO
}

export interface DeleteAllBuildsRequest {
  force?: boolean
}

export interface DeleteBuildRequest {
  buildId: string
  force?: boolean
}

export interface DeleteBuildsFromPrebuildRequest {
  prebuildId: string
  force?: boolean
}

export interface GetBuildRequest {
  buildId: string
}

/**
 *
 */
export class BuildApi extends runtime.BaseAPI {
  /**
   * Create a build
   * Create a build
   */
  async createBuildRaw(
    requestParameters: CreateBuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['createBuildDto'] == null) {
      throw new runtime.RequiredError(
        'createBuildDto',
        'Required parameter "createBuildDto" was null or undefined when calling createBuild().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/build`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateBuildDTOToJSON(requestParameters['createBuildDto']),
      },
      initOverrides,
    )

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response)
    } else {
      return new runtime.TextApiResponse(response) as any
    }
  }

  /**
   * Create a build
   * Create a build
   */
  async createBuild(
    requestParameters: CreateBuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.createBuildRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Delete ALL builds
   * Delete ALL builds
   */
  async deleteAllBuildsRaw(
    requestParameters: DeleteAllBuildsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    if (requestParameters['force'] != null) {
      queryParameters['force'] = requestParameters['force']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/build`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete ALL builds
   * Delete ALL builds
   */
  async deleteAllBuilds(
    requestParameters: DeleteAllBuildsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteAllBuildsRaw(requestParameters, initOverrides)
  }

  /**
   * Delete build
   * Delete build
   */
  async deleteBuildRaw(
    requestParameters: DeleteBuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['buildId'] == null) {
      throw new runtime.RequiredError(
        'buildId',
        'Required parameter "buildId" was null or undefined when calling deleteBuild().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['force'] != null) {
      queryParameters['force'] = requestParameters['force']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/build/{buildId}`.replace(
          `{${'buildId'}}`,
          encodeURIComponent(String(requestParameters['buildId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete build
   * Delete build
   */
  async deleteBuild(
    requestParameters: DeleteBuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteBuildRaw(requestParameters, initOverrides)
  }

  /**
   * Delete builds
   * Delete builds
   */
  async deleteBuildsFromPrebuildRaw(
    requestParameters: DeleteBuildsFromPrebuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['prebuildId'] == null) {
      throw new runtime.RequiredError(
        'prebuildId',
        'Required parameter "prebuildId" was null or undefined when calling deleteBuildsFromPrebuild().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['force'] != null) {
      queryParameters['force'] = requestParameters['force']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/build/prebuild/{prebuildId}`.replace(
          `{${'prebuildId'}}`,
          encodeURIComponent(String(requestParameters['prebuildId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete builds
   * Delete builds
   */
  async deleteBuildsFromPrebuild(
    requestParameters: DeleteBuildsFromPrebuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteBuildsFromPrebuildRaw(requestParameters, initOverrides)
  }

  /**
   * Get build data
   * Get build data
   */
  async getBuildRaw(
    requestParameters: GetBuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Build>> {
    if (requestParameters['buildId'] == null) {
      throw new runtime.RequiredError(
        'buildId',
        'Required parameter "buildId" was null or undefined when calling getBuild().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/build/{buildId}`.replace(
          `{${'buildId'}}`,
          encodeURIComponent(String(requestParameters['buildId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BuildFromJSON(jsonValue),
    )
  }

  /**
   * Get build data
   * Get build data
   */
  async getBuild(
    requestParameters: GetBuildRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Build> {
    const response = await this.getBuildRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * List builds
   * List builds
   */
  async listBuildsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Build>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/build`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(BuildFromJSON),
    )
  }

  /**
   * List builds
   * List builds
   */
  async listBuilds(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Build>> {
    const response = await this.listBuildsRaw(initOverrides)
    return await response.value()
  }
}
