/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { ApiKey } from '../models/index'
import { ApiKeyFromJSON, ApiKeyToJSON } from '../models/index'

export interface GenerateApiKeyRequest {
  apiKeyName: string
}

export interface RevokeApiKeyRequest {
  apiKeyName: string
}

/**
 *
 */
export class ApiKeyApi extends runtime.BaseAPI {
  /**
   * Generate an API key
   * Generate an API key
   */
  async generateApiKeyRaw(
    requestParameters: GenerateApiKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (requestParameters['apiKeyName'] == null) {
      throw new runtime.RequiredError(
        'apiKeyName',
        'Required parameter "apiKeyName" was null or undefined when calling generateApiKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/apikey/{apiKeyName}`.replace(
          `{${'apiKeyName'}}`,
          encodeURIComponent(String(requestParameters['apiKeyName'])),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response)
    } else {
      return new runtime.TextApiResponse(response) as any
    }
  }

  /**
   * Generate an API key
   * Generate an API key
   */
  async generateApiKey(
    requestParameters: GenerateApiKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.generateApiKeyRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * List API keys
   * List API keys
   */
  async listClientApiKeysRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ApiKey>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/apikey`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ApiKeyFromJSON),
    )
  }

  /**
   * List API keys
   * List API keys
   */
  async listClientApiKeys(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ApiKey>> {
    const response = await this.listClientApiKeysRaw(initOverrides)
    return await response.value()
  }

  /**
   * Revoke API key
   * Revoke API key
   */
  async revokeApiKeyRaw(
    requestParameters: RevokeApiKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['apiKeyName'] == null) {
      throw new runtime.RequiredError(
        'apiKeyName',
        'Required parameter "apiKeyName" was null or undefined when calling revokeApiKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/apikey/{apiKeyName}`.replace(
          `{${'apiKeyName'}}`,
          encodeURIComponent(String(requestParameters['apiKeyName'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Revoke API key
   * Revoke API key
   */
  async revokeApiKey(
    requestParameters: RevokeApiKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.revokeApiKeyRaw(requestParameters, initOverrides)
  }
}
