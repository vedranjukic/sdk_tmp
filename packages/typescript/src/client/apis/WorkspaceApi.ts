/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Server API
 * Daytona Server API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  CreateWorkspaceDTO,
  SetProjectState,
  Workspace,
  WorkspaceDTO,
} from '../models/index'
import {
  CreateWorkspaceDTOFromJSON,
  CreateWorkspaceDTOToJSON,
  SetProjectStateFromJSON,
  SetProjectStateToJSON,
  WorkspaceFromJSON,
  WorkspaceToJSON,
  WorkspaceDTOFromJSON,
  WorkspaceDTOToJSON,
} from '../models/index'

export interface CreateWorkspaceRequest {
  workspace: CreateWorkspaceDTO
}

export interface GetWorkspaceRequest {
  workspaceId: string
  verbose?: boolean
}

export interface ListWorkspacesRequest {
  verbose?: boolean
}

export interface RemoveWorkspaceRequest {
  workspaceId: string
  force?: boolean
}

export interface SetProjectStateRequest {
  workspaceId: string
  projectId: string
  setState: SetProjectState
}

export interface StartProjectRequest {
  workspaceId: string
  projectId: string
}

export interface StartWorkspaceRequest {
  workspaceId: string
}

export interface StopProjectRequest {
  workspaceId: string
  projectId: string
}

export interface StopWorkspaceRequest {
  workspaceId: string
}

/**
 *
 */
export class WorkspaceApi extends runtime.BaseAPI {
  /**
   * Create a workspace
   * Create a workspace
   */
  async createWorkspaceRaw(
    requestParameters: CreateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Workspace>> {
    if (requestParameters['workspace'] == null) {
      throw new runtime.RequiredError(
        'workspace',
        'Required parameter "workspace" was null or undefined when calling createWorkspace().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateWorkspaceDTOToJSON(requestParameters['workspace']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceFromJSON(jsonValue),
    )
  }

  /**
   * Create a workspace
   * Create a workspace
   */
  async createWorkspace(
    requestParameters: CreateWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Workspace> {
    const response = await this.createWorkspaceRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get workspace info
   * Get workspace info
   */
  async getWorkspaceRaw(
    requestParameters: GetWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceDTO>> {
    if (requestParameters['workspaceId'] == null) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter "workspaceId" was null or undefined when calling getWorkspace().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['verbose'] != null) {
      queryParameters['verbose'] = requestParameters['verbose']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace/{workspaceId}`.replace(
          `{${'workspaceId'}}`,
          encodeURIComponent(String(requestParameters['workspaceId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceDTOFromJSON(jsonValue),
    )
  }

  /**
   * Get workspace info
   * Get workspace info
   */
  async getWorkspace(
    requestParameters: GetWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceDTO> {
    const response = await this.getWorkspaceRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * List workspaces
   * List workspaces
   */
  async listWorkspacesRaw(
    requestParameters: ListWorkspacesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<WorkspaceDTO>>> {
    const queryParameters: any = {}

    if (requestParameters['verbose'] != null) {
      queryParameters['verbose'] = requestParameters['verbose']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(WorkspaceDTOFromJSON),
    )
  }

  /**
   * List workspaces
   * List workspaces
   */
  async listWorkspaces(
    requestParameters: ListWorkspacesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<WorkspaceDTO>> {
    const response = await this.listWorkspacesRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Remove workspace
   * Remove workspace
   */
  async removeWorkspaceRaw(
    requestParameters: RemoveWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['workspaceId'] == null) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter "workspaceId" was null or undefined when calling removeWorkspace().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['force'] != null) {
      queryParameters['force'] = requestParameters['force']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace/{workspaceId}`.replace(
          `{${'workspaceId'}}`,
          encodeURIComponent(String(requestParameters['workspaceId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Remove workspace
   * Remove workspace
   */
  async removeWorkspace(
    requestParameters: RemoveWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.removeWorkspaceRaw(requestParameters, initOverrides)
  }

  /**
   * Set project state
   * Set project state
   */
  async setProjectStateRaw(
    requestParameters: SetProjectStateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['workspaceId'] == null) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter "workspaceId" was null or undefined when calling setProjectState().',
      )
    }

    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling setProjectState().',
      )
    }

    if (requestParameters['setState'] == null) {
      throw new runtime.RequiredError(
        'setState',
        'Required parameter "setState" was null or undefined when calling setProjectState().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace/{workspaceId}/{projectId}/state`
          .replace(
            `{${'workspaceId'}}`,
            encodeURIComponent(String(requestParameters['workspaceId'])),
          )
          .replace(
            `{${'projectId'}}`,
            encodeURIComponent(String(requestParameters['projectId'])),
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SetProjectStateToJSON(requestParameters['setState']),
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Set project state
   * Set project state
   */
  async setProjectState(
    requestParameters: SetProjectStateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setProjectStateRaw(requestParameters, initOverrides)
  }

  /**
   * Start project
   * Start project
   */
  async startProjectRaw(
    requestParameters: StartProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['workspaceId'] == null) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter "workspaceId" was null or undefined when calling startProject().',
      )
    }

    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling startProject().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace/{workspaceId}/{projectId}/start`
          .replace(
            `{${'workspaceId'}}`,
            encodeURIComponent(String(requestParameters['workspaceId'])),
          )
          .replace(
            `{${'projectId'}}`,
            encodeURIComponent(String(requestParameters['projectId'])),
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Start project
   * Start project
   */
  async startProject(
    requestParameters: StartProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.startProjectRaw(requestParameters, initOverrides)
  }

  /**
   * Start workspace
   * Start workspace
   */
  async startWorkspaceRaw(
    requestParameters: StartWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['workspaceId'] == null) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter "workspaceId" was null or undefined when calling startWorkspace().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace/{workspaceId}/start`.replace(
          `{${'workspaceId'}}`,
          encodeURIComponent(String(requestParameters['workspaceId'])),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Start workspace
   * Start workspace
   */
  async startWorkspace(
    requestParameters: StartWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.startWorkspaceRaw(requestParameters, initOverrides)
  }

  /**
   * Stop project
   * Stop project
   */
  async stopProjectRaw(
    requestParameters: StopProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['workspaceId'] == null) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter "workspaceId" was null or undefined when calling stopProject().',
      )
    }

    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling stopProject().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace/{workspaceId}/{projectId}/stop`
          .replace(
            `{${'workspaceId'}}`,
            encodeURIComponent(String(requestParameters['workspaceId'])),
          )
          .replace(
            `{${'projectId'}}`,
            encodeURIComponent(String(requestParameters['projectId'])),
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Stop project
   * Stop project
   */
  async stopProject(
    requestParameters: StopProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.stopProjectRaw(requestParameters, initOverrides)
  }

  /**
   * Stop workspace
   * Stop workspace
   */
  async stopWorkspaceRaw(
    requestParameters: StopWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['workspaceId'] == null) {
      throw new runtime.RequiredError(
        'workspaceId',
        'Required parameter "workspaceId" was null or undefined when calling stopWorkspace().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] = await this.configuration.apiKey(
        'Authorization',
      ) // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/workspace/{workspaceId}/stop`.replace(
          `{${'workspaceId'}}`,
          encodeURIComponent(String(requestParameters['workspaceId'])),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Stop workspace
   * Stop workspace
   */
  async stopWorkspace(
    requestParameters: StopWorkspaceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.stopWorkspaceRaw(requestParameters, initOverrides)
  }
}
